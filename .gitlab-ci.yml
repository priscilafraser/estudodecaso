variables:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CLIENT_TIMEOUT: 600
  COMPOSE_HTTP_TIMEOUT: 600
  DOCKER_BUILDKIT: 0
  COMPOSE_DOCKER_CLI_BUILD: 0
stages:
  - build
  - test1
  - test3
  - test4
  - deploy
  - notify
build_job:
  stage: build
  image: python:3.11
  script:
    - pip install -r requirements.txt
test_job:
  stage: test1
  image: python:3.11
  script:
    - echo "Testando a aplicacao flask"
    - pip install -r requirements.txt
    - pip install pytest pytest-cov
    - pytest || echo "Nenhum teste encontrado"
    - pytest --cov=. --cov-report=xml || echo "Nenhum teste encontrado"
  artifacts:
    paths:
      - coverage.xml
    expire_in: 1 week
bandit_scan:
  stage: test3
  image: python:3.11
  before_script:
    - pip install bandit
  script:
    - echo "Executando análise de segurança com Bandit"
    - bandit -r todo_project -f json -o bandit-report.json || true
  artifacts:
    paths:
      - bandit-report.json
    expire_in: 1 week
dependency_check:
  stage: test4
  image: owasp/dependency-check:latest
  script:
    - echo "Executando análise de dependências com OWASP Dependency-Check"
    - dependency-check.sh --project "TaskManager" --scan . --format JSON --out owasp-report
  artifacts:
    paths:
      - owasp-report
    expire_in: 1 week
deploy_job:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind

  before_script:
    - echo "Removendo container antigo na porta 5000"
    - PORT_CONTAINERS=$(docker ps --filter "publish=5000" -q)
    - echo $PORT_CONTAINERS
    - |
      if [ -n "$PORT_CONTAINERS" ]; then
        docker stop $PORT_CONTAINERS
        docker rm $PORT_CONTAINERS
        sleep 5
      fi

  script:
    - echo "Fazendo deploy da aplicação Flask"
    - docker run -d -p 5000:5000 task-manager:latest
